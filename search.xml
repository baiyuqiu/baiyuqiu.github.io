<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Hexo+Github搭建个人博客</title>
    <url>/2022/04/17/%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><img src="/images/220410112400.webp" alt="img"></p>
<span id="more"></span>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>开始之前,先大致介绍一下用到的技术和相关概念:</p>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>GitHub是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务;</p>
<h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>Github Pages设计的初衷是为托管在GitHub上的项目提供介绍页面,开发者们可以通过GitHub Pages为他们的每个项目创建一个用于介绍该项目的静态网站,不过由于他的空间免费而且稳定,因此非常适合用来搭建个人博客网站;</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Git是一个开源的分布式版本控制系统,可以有效、高速的处理从很小到非常大的项目版本管理.它的作用和Svn类似,就是一个版本控制的工具,用它可以将我们写的代码提交到Github;</p>
<h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><p>jekyll是一个简单的免费的Blog生成工具,将纯文本转化为静态网站和博客;由于咱们的GitHub Pages生成的是静态页面,每次更新博客都需要手动更改HTML,这就使得每次写博客都变得很麻烦,而用了这个工具以后,它会根据预先设置好的格式来生成博客内容,你就无需关心html代码,只需要把重心放在博客的写作上;</p>
<h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure>
<p>等待安装完成后，查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12.17.0</span><br><span class="line">$ npm -v</span><br><span class="line">6.14.4</span><br></pre></td></tr></table></figure>

<h3 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>
<p>等待安装完成后，查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.24.3 (Apple Git-128)</span><br></pre></td></tr></table></figure>

<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>安装脚手架</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>等待安装完成后，查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo-cli: 4.3.0</span><br></pre></td></tr></table></figure>
<p>到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目了。</p>
<h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="注册Github账号-已有账号可忽略"><a href="#注册Github账号-已有账号可忽略" class="headerlink" title="注册Github账号(已有账号可忽略)"></a>注册Github账号(已有账号可忽略)</h3><p>在<a href="https://github.com/">Github官网</a>中注册账号，如果不懂注册可以网上搜索下注册账号的文章，或者查看<a href="https://blog.csdn.net/weixin_51674304/article/details/121525251">Github注册(图文详解)</a></p>
<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>在<a href="https://github.com/">Github官网</a>登录成功后，如下图新建仓库<br><img src="/images/220410124403.png" alt="img"><br><img src="/images/220410130015.png" alt="img"><br><strong>再次强调：</strong>Repository name就是你的仓库名,这个仓库名最好使用”你的名字.github.io”这种格式来命名，方便后面访问。</p>
<h3 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>SSH是一个专为远程登录会话和其他网络服务提供安全性的协议。默认状态下SSH链接是需要密码认证的，可以通过添加系统认证（即公钥-私钥）的修改，修改后系统间切换可以避免密码输入和SSH认证。</p>
<p>对信息的加密和解密采用不同的key，这对key分别称作private key和public key，其中，public key存放在欲登录的服务器上，而private key为特定的客户机所持有。</p>
<p>当客户机向服务器发出建立安全连接的请求时，首先发送自己的public key，如果这个public key是被服务器所允许的，服务器就发送一个经过public key加密的随机数据给客户机，这个数据只能通过private key解密，客户机将解密后的信息发还给服务器，服务器验证正确后即确认客户机是可信任的，从而建立起一条安全的信息通道。</p>
<p>通过这种方式，客户机不需要向外发送自己的身份标志“private key”即可达到校验的目的，并且private key是不能通过public key反向推断出来的。这避免了网络窃听可能造成的密码泄露。客户机需要小心的保存自己的private key，以免被其他人窃取，一旦这样的事情发生，就需要各服务器更换受信的public key列表。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>需要使用SSH将GitHub与本地进行绑定，配置好SSH密钥后，我们便可以通过git操作实现本地代码库与Github代码库同步。</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="生成SSH-Key-1"><a href="#生成SSH-Key-1" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line">//引号里面填写你的注册Github时的邮箱地址，比如xxxxxxxx@gmail.com</span><br></pre></td></tr></table></figure>
<p>【第一次回车】之后会出现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (~/.ssh/id_rsa):</span><br><span class="line">//到这里可以直接回车将密钥按默认文件进行存储</span><br></pre></td></tr></table></figure>
<p>【第二次回车】然后会出现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">//这里是要你输入密码，其实不需要输什么密码，直接回车就行</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">//再回车</span><br></pre></td></tr></table></figure>
<p>【第三次回车、第四次回车】接下来屏幕会显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> ~/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> ~/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">//这里是各种字母数字组成的字符串，结尾是你的邮箱</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">//这里也是各种字母数字符号组成的字符串</span></span><br></pre></td></tr></table></figure>
<p>到这里就说明SSH Key生成成功了;</p>
<h5 id="获取SSH-Key"><a href="#获取SSH-Key" class="headerlink" title="获取SSH Key"></a>获取SSH Key</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>通过上面的命令，刚才生成的ssh key公钥会被复制到mac电脑的剪切板中。</p>
<h3 id="添加SSH-Key到Github"><a href="#添加SSH-Key到Github" class="headerlink" title="添加SSH Key到Github"></a>添加SSH Key到Github</h3><h4 id="登录Github，进入Setting"><a href="#登录Github，进入Setting" class="headerlink" title="登录Github，进入Setting:"></a>登录Github，进入Setting:</h4><p><img src="/images/220410134523.png" alt="img"></p>
<h4 id="点击-SSH-and-GPG-Keys"><a href="#点击-SSH-and-GPG-Keys" class="headerlink" title="点击 SSH and GPG Keys"></a>点击 SSH and GPG Keys</h4><p><img src="/images/220410134856.png" alt="img"></p>
<h4 id="点击-New-SSH-Key"><a href="#点击-New-SSH-Key" class="headerlink" title="点击 New SSH Key"></a>点击 New SSH Key</h4><p><img src="/images/220410135134.png" alt="img"></p>
<h4 id="添加-SSH-Key"><a href="#添加-SSH-Key" class="headerlink" title="添加 SSH Key"></a>添加 SSH Key</h4><p><img src="/images/220410141007.png" alt="img"><br>然后点击 ADD SSH Key。</p>
<h4 id="测试SSH是否绑定成功"><a href="#测试SSH是否绑定成功" class="headerlink" title="测试SSH是否绑定成功"></a>测试SSH是否绑定成功</h4><p>输入以下命令：注意：<a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a>不要做任何更改！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>回车，再次输入yes后回车，就会显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hi BaiYuQiu! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h4 id="本地配置个人Github账号"><a href="#本地配置个人Github账号" class="headerlink" title="本地配置个人Github账号"></a>本地配置个人Github账号</h4><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成自己的，名字可以不是GitHub的昵称，但为了方便记忆，建议与GitHub一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;此处填你的用户名&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;此处填你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>到此为止，SSH就在GitHub上绑定成功了，本地与Github成功连接.</p>
<h3 id="使用Hexo创建博客"><a href="#使用Hexo创建博客" class="headerlink" title="使用Hexo创建博客"></a>使用Hexo创建博客</h3><h4 id="下载仓库"><a href="#下载仓库" class="headerlink" title="下载仓库"></a>下载仓库</h4><p>登录Github, 打开刚才新建的项目yourname.github.io<br>复制仓库的地址，仓库地址如下图<br><img src="/images/220410141506.png" alt="img"><br>然后在Mac电脑桌面输入下面命令，就能将Github仓库拉到本地，后面可以使用Git工具提交内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/xxx/xxx.github.io.git</span><br></pre></td></tr></table></figure>
<h4 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h4><p>打开电脑“终端”应用，输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop/BaiYuQiu.github.io</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>当命令执行完成后，会在BaiYuQiu.github.io文件夹下生成如下图所示的目录结构<br><img src="/images/220410143207.png" alt="img"></p>
<h4 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h4><p>接下去要安装相关依赖，并在自己电脑进行本地部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo server</span><br></pre></td></tr></table></figure>
<p>直到结果显示如下，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>并在浏览器中打开<a href="http://localhost:4000/">http://localhost:4000</a>，如果显示如下图，恭喜您，已经成功创建好了个人博客了，如果没有出现下面截图，可能哪一步出错了，再重新检测下。<br><img src="/images/220410144048.png" alt="img"></p>
<h4 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h4><p>通过上面的本地部署，接下去我们怎么将自己的博客部署到Github page上，让大家可以访问呢。</p>
<h5 id="安装工具-1"><a href="#安装工具-1" class="headerlink" title="安装工具"></a>安装工具</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><p>打开BaiYuQiu.github.io目录下_config.yml文件，将该文件最底部的deploy关键字代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: </span><br></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/xxx/xxx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>在BaiYuQiu.github.io目录下，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>hexo g用来生成Hexo页面，hexo d是使用hexo-deployer-git将页面部署到Github仓库中，当部署成功后，就可以可以在浏览器下输入xxx.github.io显示跟本地部署一样的内容了。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的使用</title>
    <url>/2022/04/26/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="基础使用（命令）"><a href="#基础使用（命令）" class="headerlink" title="基础使用（命令）"></a>基础使用（命令）</h2><h3 id="hexo-s"><a href="#hexo-s" class="headerlink" title="hexo s"></a>hexo s</h3><p>作用：启动本地服务器，只能用于预览在<code>_posts</code>目录下的主题，默认地址： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p>
<ul>
<li><code>hexo s</code> 是 <code>hexo server</code> 的缩写，命令效果一致；</li>
<li>对于主题或_config.yml的修改，需要重启本地服务器后才能预览效果；</li>
<li>如果预览<code>草稿</code>中的主题，需要执行<code>hexo s --draft</code>；</li>
</ul>
<span id="more"></span>

<h3 id="hexo-c"><a href="#hexo-c" class="headerlink" title="hexo c"></a>hexo c</h3><p>作用：清除缓存文件 db.json 和已生成的静态文件 public。</p>
<ul>
<li><code>hexo c</code> 是 <code>hexo clean</code> 的缩写，命令效果一致；</li>
</ul>
<h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><p>作用：生成网站静态文件到默认设置的 public 文件夹。</p>
<ul>
<li>hexo g 是 hexo generate 的缩写，命令效果一致；</li>
<li>便于查看网站生成的静态文件或者手动部署网站；</li>
<li>如果使用自动部署，不需要先执行该命令；</li>
</ul>
<h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><p>作用：自动生成网站静态文件，并部署到设定的仓库。(该配置在根目录的<code>_config.yml</code>的<code>deploy</code>字段)</p>
<ul>
<li>hexo d 是 hexo depoly 的缩写，命令效果一致；</li>
</ul>
<h3 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h3><p>在根目录命令行输入hexo new <code>&lt;模板&gt;</code> <code>&lt;文章名&gt;</code></p>
<table>
<thead>
<tr>
<th align="center">模板</th>
<th align="center">描述</th>
<th align="center">路径</th>
</tr>
</thead>
<tbody><tr>
<td align="center">post</td>
<td align="center">新建文章</td>
<td align="center">/source/_posts/</td>
</tr>
<tr>
<td align="center">draft</td>
<td align="center">新建草稿</td>
<td align="center">/source/_drafts/</td>
</tr>
<tr>
<td align="center">page</td>
<td align="center">新建页面（标签页，分类页等)</td>
<td align="center">/source/</td>
</tr>
</tbody></table>
<p>当我们需要新建一个文章是，命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post myArticle</span><br><span class="line">或</span><br><span class="line">hexo new myArticle</span><br></pre></td></tr></table></figure>
<p>此时在<code>source/_posts/</code>文件夹中多了一个<code>myArticle.md</code>文件，该.md文件是一个主题，我们可以在里面进行创作自己的主题文章。</p>
<p>当我们需要新建一个草稿时候，命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new draft myDraft</span><br></pre></td></tr></table></figure>
<p>此时在<code>source/_drafts/</code>文件夹中多了一个myDraft.md文件。我们跟创建<code>post</code>主题一样进行创作，当我们创建完成后，需要执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo publish myDraft</span><br></pre></td></tr></table></figure>
<p>操作完成后，<code>source/_drafts/myDraft.md</code>会被移动到<code>source/_posts/myDraft.md</code>，这样草稿中的文章才能被进行发布。</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="官网下载地址"><a href="#官网下载地址" class="headerlink" title="官网下载地址"></a>官网下载地址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo主题网站： https://hexo.io/themes/</span><br></pre></td></tr></table></figure>
<p>这里有几百个主题供你选择，或者我们可以去github上寻找合适的主题。</p>
<h3 id="Next主题设置"><a href="#Next主题设置" class="headerlink" title="Next主题设置"></a>Next主题设置</h3><p><a href="https://github.com/next-theme/hexo-theme-next">Next主题仓库</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在根目录，执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<p>操作完成后，会在<code>themes</code>目录下多一个<code>next</code>的主题。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>修改根目录中的<code>_config.yml</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: zh-CN</span><br><span class="line"></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>再重新部署下，就能看到最新的主题了。</p>
<h3 id="阅读全文设置"><a href="#阅读全文设置" class="headerlink" title="阅读全文设置"></a>阅读全文设置</h3><p>想要在网站首页只显示每篇文章的部分内容，不要全部内容都展示出来。有两个解决方法：</p>
<ol>
<li>修改 _config.yml 文件设置</li>
<li>直接在你的 md 博文中加一句</li>
</ol>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>用文本编辑器打开 themes/next 目录下的 _config.yml 文件，找到这段代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>把enable的false改成true就行了，然后length是设定文章预览的文本长度。修改后重启 hexo 就好了。<br>但这种方法的效果是会格式化你文章的样式，直接把文字挤在一起显示，最后会有…</p>
<h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><p>在想要显示的文章预览部分后加上<code>&lt;!--more--&gt;</code>，这样首页和列表页展示的文章内容就是<code>&lt;!--more--&gt;</code>之前的文字，而之后的就不会显示了，同时也保留文章原样式。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>otool使用</title>
    <url>/2022/05/16/otool%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="otool简介"><a href="#otool简介" class="headerlink" title="otool简介"></a>otool简介</h3><p>otool(object file displaying tool)<br>它是Xcode自带的工具，用于提取并显示Mach-O文件的相关信息，可以查看Mach-O文件Header、Load Command、Segment等信息.</p>
<span id="more"></span>

<h3 id="otool命令"><a href="#otool命令" class="headerlink" title="otool命令"></a>otool命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f print the fat headers</span><br><span class="line">-a print the archive header</span><br><span class="line">-h print the mach header</span><br><span class="line">-l print the load commands</span><br><span class="line">-L print shared libraries used</span><br><span class="line">-D print shared library id name</span><br><span class="line">-t print the text section (disassemble with -v)</span><br><span class="line">-x print all text sections (disassemble with -v)</span><br><span class="line">-p &lt;routine name&gt;  start dissassemble from routine name</span><br><span class="line">-s &lt;segname&gt; &lt;sectname&gt; print contents of section</span><br><span class="line">-d print the data section</span><br><span class="line">-o print the Objective-C segment</span><br><span class="line">-r print the relocation entries</span><br><span class="line">-S print the table of contents of a library (obsolete)</span><br><span class="line">-T print the table of contents of a dynamic shared library (obsolete)</span><br><span class="line">-M print the module table of a dynamic shared library (obsolete)</span><br><span class="line">-R print the reference table of a dynamic shared library (obsolete)</span><br><span class="line">-I print the indirect symbol table</span><br><span class="line">-H print the two-level hints table (obsolete)</span><br><span class="line">-G print the data in code table</span><br><span class="line">-v print verbosely (symbolically) when possible</span><br><span class="line">-V print disassembled operands symbolically</span><br><span class="line">-c print argument strings of a core file</span><br><span class="line">-X print no leading addresses or headers</span><br><span class="line">-m don&#x27;t use archive(member) syntax</span><br><span class="line">-B force Thumb disassembly (ARM objects only)</span><br><span class="line">-q use llvm&#x27;s disassembler (the default)</span><br><span class="line">-Q use otool(1)&#x27;s disassembler</span><br><span class="line">-mcpu=arg use `arg&#x27; as the cpu for disassembly</span><br><span class="line">-j print opcode bytes</span><br><span class="line">-P print the info plist section as strings</span><br><span class="line">-C print linker optimization hints </span><br></pre></td></tr></table></figure>

<h4 id="查看Mach-O头结构"><a href="#查看Mach-O头结构" class="headerlink" title="查看Mach-O头结构"></a>查看Mach-O头结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Mach-O otool -h WeChat</span><br><span class="line">WeChat:</span><br><span class="line">Mach header</span><br><span class="line">      magic  cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags</span><br><span class="line"> 0xfeedfacf 16777228          0  0x00           2   136      13576 0x04a10085</span><br></pre></td></tr></table></figure>

<h4 id="查看是否加密"><a href="#查看是否加密" class="headerlink" title="查看是否加密"></a>查看是否加密</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Mach-O otool -l WeChat | grep -B 2 crypt</span><br><span class="line">          cmd LC_ENCRYPTION_INFO_64</span><br><span class="line">      cmdsize 24</span><br><span class="line">     cryptoff 16384</span><br><span class="line">    cryptsize 215269376</span><br><span class="line">      cryptid 1</span><br></pre></td></tr></table></figure>
<p>其中<code>cryptid</code>代表是否加壳（ 1: 加壳， 0: 已脱壳 ）</p>
<h4 id="查看Segments和Sections"><a href="#查看Segments和Sections" class="headerlink" title="查看Segments和Sections"></a>查看Segments和Sections</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  Mach-O size -m WeChat</span><br><span class="line">Segment __PAGEZERO: 4294967296 (zero fill)</span><br><span class="line">Segment __TEXT: 100253696</span><br><span class="line">	Section __text: 84453412</span><br><span class="line">	Section __stubs: 26652</span><br><span class="line">	Section __stub_helper: 25788</span><br><span class="line">	Section __const: 2231432</span><br><span class="line">	Section __cstring: 6969905</span><br><span class="line">	Section __objc_methname: 3129133</span><br><span class="line">	Section __objc_classname: 379072</span><br><span class="line">	Section __objc_methtype: 969217</span><br><span class="line">	Section __ustring: 73664</span><br><span class="line">	Section __gcc_except_tab: 1482156</span><br><span class="line">	Section __unwind_info: 298784</span><br><span class="line">	Section __eh_frame: 194484</span><br><span class="line">	total 100233699</span><br><span class="line">Segment __DATA: 90275840</span><br><span class="line">	Section __got: 17312</span><br><span class="line">	Section __la_symbol_ptr: 17768</span><br><span class="line">	Section __mod_init_func: 8136</span><br><span class="line">	Section __mod_term_func: 8</span><br><span class="line">	Section __const: 1551840</span><br><span class="line">	Section __cfstring: 2497056</span><br><span class="line">	Section __objc_classlist: 100960</span><br><span class="line">	Section __objc_nlclslist: 88</span><br><span class="line">	Section __objc_catlist: 2080</span><br><span class="line">	Section __objc_nlcatlist: 176</span><br><span class="line">	Section __objc_protolist: 20152</span><br><span class="line">	Section __objc_imageinfo: 8</span><br><span class="line">	Section __objc_const: 10612712</span><br><span class="line">	Section __objc_selrefs: 825512</span><br><span class="line">	Section __objc_protorefs: 3984</span><br><span class="line">	Section __objc_classrefs: 86984</span><br><span class="line">	Section __objc_superrefs: 53528</span><br><span class="line">	Section __objc_ivar: 232732</span><br><span class="line">	Section __objc_data: 1009600</span><br><span class="line">	Section __data: 868968</span><br><span class="line">	Section __bss: 2196228 (zerofill)</span><br><span class="line">	Section __common: 70166996 (zerofill)</span><br><span class="line">	total 90272828</span><br><span class="line">Segment __LINKEDIT: 5603328</span><br><span class="line">total 4491100160</span><br></pre></td></tr></table></figure>

<h4 id="查看依赖库"><a href="#查看依赖库" class="headerlink" title="查看依赖库"></a>查看依赖库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -L WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有类"><a href="#查看所有类" class="headerlink" title="查看所有类"></a>查看所有类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __TEXT __objc_classname WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有方法"><a href="#查看所有方法" class="headerlink" title="查看所有方法"></a>查看所有方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __TEXT __objc_methname WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有定义"><a href="#查看所有定义" class="headerlink" title="查看所有定义"></a>查看所有定义</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __TEXT __objc_methtype WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看字符串"><a href="#查看字符串" class="headerlink" title="查看字符串"></a>查看字符串</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __TEXT __cstring WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有类地址"><a href="#查看所有类地址" class="headerlink" title="查看所有类地址"></a>查看所有类地址</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __DATA __objc_classlist WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有被引用类地址"><a href="#查看所有被引用类地址" class="headerlink" title="查看所有被引用类地址"></a>查看所有被引用类地址</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __DATA __objc_classrefs WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有被引用父类地址"><a href="#查看所有被引用父类地址" class="headerlink" title="查看所有被引用父类地址"></a>查看所有被引用父类地址</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __DATA __objc_superrefs WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有协议地址"><a href="#查看所有协议地址" class="headerlink" title="查看所有协议地址"></a>查看所有协议地址</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __DATA __objc_protolist WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有被引用协议地址"><a href="#查看所有被引用协议地址" class="headerlink" title="查看所有被引用协议地址"></a>查看所有被引用协议地址</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __DATA __objc_protorefs WeChat</span><br></pre></td></tr></table></figure>

<h5 id="查看所有属性地址"><a href="#查看所有属性地址" class="headerlink" title="查看所有属性地址"></a>查看所有属性地址</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">otool -v -s __DATA __objc_ivar WeChat</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
</search>
